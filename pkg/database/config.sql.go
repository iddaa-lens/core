// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: config.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createConfig = `-- name: CreateConfig :one
INSERT INTO app_config (platform, config_data, sportoto_program_name, payin_end_date, next_draw_expected_win)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, platform, config_data, sportoto_program_name, payin_end_date, next_draw_expected_win, created_at, updated_at
`

type CreateConfigParams struct {
	Platform            string           `db:"platform" json:"platform"`
	ConfigData          []byte           `db:"config_data" json:"config_data"`
	SportotoProgramName pgtype.Text      `db:"sportoto_program_name" json:"sportoto_program_name"`
	PayinEndDate        pgtype.Timestamp `db:"payin_end_date" json:"payin_end_date"`
	NextDrawExpectedWin pgtype.Numeric   `db:"next_draw_expected_win" json:"next_draw_expected_win"`
}

func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) (AppConfig, error) {
	row := q.db.QueryRow(ctx, createConfig,
		arg.Platform,
		arg.ConfigData,
		arg.SportotoProgramName,
		arg.PayinEndDate,
		arg.NextDrawExpectedWin,
	)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.Platform,
		&i.ConfigData,
		&i.SportotoProgramName,
		&i.PayinEndDate,
		&i.NextDrawExpectedWin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestConfig = `-- name: GetLatestConfig :one
SELECT id, platform, config_data, sportoto_program_name, payin_end_date, next_draw_expected_win, created_at, updated_at FROM app_config 
WHERE platform = $1
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetLatestConfig(ctx context.Context, platform string) (AppConfig, error) {
	row := q.db.QueryRow(ctx, getLatestConfig, platform)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.Platform,
		&i.ConfigData,
		&i.SportotoProgramName,
		&i.PayinEndDate,
		&i.NextDrawExpectedWin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertConfig = `-- name: UpsertConfig :one
INSERT INTO app_config (platform, config_data, sportoto_program_name, payin_end_date, next_draw_expected_win)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (platform) DO UPDATE SET
    config_data = EXCLUDED.config_data,
    sportoto_program_name = EXCLUDED.sportoto_program_name,
    payin_end_date = EXCLUDED.payin_end_date,
    next_draw_expected_win = EXCLUDED.next_draw_expected_win,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, platform, config_data, sportoto_program_name, payin_end_date, next_draw_expected_win, created_at, updated_at
`

type UpsertConfigParams struct {
	Platform            string           `db:"platform" json:"platform"`
	ConfigData          []byte           `db:"config_data" json:"config_data"`
	SportotoProgramName pgtype.Text      `db:"sportoto_program_name" json:"sportoto_program_name"`
	PayinEndDate        pgtype.Timestamp `db:"payin_end_date" json:"payin_end_date"`
	NextDrawExpectedWin pgtype.Numeric   `db:"next_draw_expected_win" json:"next_draw_expected_win"`
}

func (q *Queries) UpsertConfig(ctx context.Context, arg UpsertConfigParams) (AppConfig, error) {
	row := q.db.QueryRow(ctx, upsertConfig,
		arg.Platform,
		arg.ConfigData,
		arg.SportotoProgramName,
		arg.PayinEndDate,
		arg.NextDrawExpectedWin,
	)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.Platform,
		&i.ConfigData,
		&i.SportotoProgramName,
		&i.PayinEndDate,
		&i.NextDrawExpectedWin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
