// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: league_mappings_bulk.sql

package generated

import (
	"context"
)

const bulkCreateLeagueMappings = `-- name: BulkCreateLeagueMappings :exec
INSERT INTO league_mappings (
    internal_league_id,
    football_api_league_id,
    confidence,
    mapping_method,
    translated_league_name,
    translated_country,
    original_league_name,
    original_country,
    match_factors,
    needs_review,
    ai_translation_used,
    normalization_applied,
    match_score,
    created_at,
    updated_at
)
SELECT
    unnest($1::int[]),
    unnest($2::int[]),
    unnest($3::float4[]),
    unnest($4::text[]),
    unnest($5::text[]),
    unnest($6::text[]),
    unnest($7::text[]),
    unnest($8::text[]),
    unnest($9::jsonb[]),
    unnest($10::boolean[]),
    unnest($11::boolean[]),
    unnest($12::boolean[]),
    unnest($13::float4[]),
    NOW(),
    NOW()
ON CONFLICT (internal_league_id) DO UPDATE SET
    football_api_league_id = EXCLUDED.football_api_league_id,
    confidence = EXCLUDED.confidence,
    mapping_method = EXCLUDED.mapping_method,
    translated_league_name = EXCLUDED.translated_league_name,
    translated_country = EXCLUDED.translated_country,
    match_factors = EXCLUDED.match_factors,
    needs_review = EXCLUDED.needs_review,
    match_score = EXCLUDED.match_score,
    updated_at = NOW()
`

type BulkCreateLeagueMappingsParams struct {
	InternalLeagueIds     []int32   `db:"internal_league_ids" json:"internal_league_ids"`
	FootballApiLeagueIds  []int32   `db:"football_api_league_ids" json:"football_api_league_ids"`
	Confidences           []float64 `db:"confidences" json:"confidences"`
	MappingMethods        []string  `db:"mapping_methods" json:"mapping_methods"`
	TranslatedLeagueNames []string  `db:"translated_league_names" json:"translated_league_names"`
	TranslatedCountries   []string  `db:"translated_countries" json:"translated_countries"`
	OriginalLeagueNames   []string  `db:"original_league_names" json:"original_league_names"`
	OriginalCountries     []string  `db:"original_countries" json:"original_countries"`
	MatchFactors          [][]byte  `db:"match_factors" json:"match_factors"`
	NeedsReview           []bool    `db:"needs_review" json:"needs_review"`
	AiTranslationUsed     []bool    `db:"ai_translation_used" json:"ai_translation_used"`
	NormalizationApplied  []bool    `db:"normalization_applied" json:"normalization_applied"`
	MatchScores           []float64 `db:"match_scores" json:"match_scores"`
}

func (q *Queries) BulkCreateLeagueMappings(ctx context.Context, arg BulkCreateLeagueMappingsParams) error {
	_, err := q.db.Exec(ctx, bulkCreateLeagueMappings,
		arg.InternalLeagueIds,
		arg.FootballApiLeagueIds,
		arg.Confidences,
		arg.MappingMethods,
		arg.TranslatedLeagueNames,
		arg.TranslatedCountries,
		arg.OriginalLeagueNames,
		arg.OriginalCountries,
		arg.MatchFactors,
		arg.NeedsReview,
		arg.AiTranslationUsed,
		arg.NormalizationApplied,
		arg.MatchScores,
	)
	return err
}
