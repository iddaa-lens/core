// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Analyze correlation between volume and odds movement
	AnalyzeVolumeOddsPattern(ctx context.Context) ([]byte, error)
	BatchGetCurrentOdds(ctx context.Context, arg BatchGetCurrentOddsParams) ([]CurrentOdd, error)
	BulkCreateLeagueMappings(ctx context.Context, arg BulkCreateLeagueMappingsParams) error
	// Helper query to get current odds for comparison
	BulkGetCurrentOddsForComparison(ctx context.Context, arg BulkGetCurrentOddsForComparisonParams) ([]BulkGetCurrentOddsForComparisonRow, error)
	// Bulk insert distribution history for changed values
	BulkInsertDistributionHistory(ctx context.Context, arg BulkInsertDistributionHistoryParams) (int64, error)
	BulkInsertOddsHistory(ctx context.Context, arg BulkInsertOddsHistoryParams) error
	// This version ensures array ordering is preserved and validates data
	BulkInsertOddsHistorySafe(ctx context.Context, arg BulkInsertOddsHistorySafeParams) error
	// Bulk insert volume history records
	BulkInsertVolumeHistory(ctx context.Context, arg BulkInsertVolumeHistoryParams) (int64, error)
	// Bulk update event volumes with database-calculated ranks
	BulkUpdateEventVolumes(ctx context.Context, arg BulkUpdateEventVolumesParams) (int64, error)
	BulkUpsertCurrentOdds(ctx context.Context, arg BulkUpsertCurrentOddsParams) error
	// This version ensures array ordering is preserved by using ROW_NUMBER()
	BulkUpsertCurrentOddsSafe(ctx context.Context, arg BulkUpsertCurrentOddsSafeParams) error
	// Ensure insertion order matches array order
	// Alternative approach using WITH ORDINALITY for PostgreSQL 9.4+
	BulkUpsertCurrentOddsWithOrdinality(ctx context.Context, arg BulkUpsertCurrentOddsWithOrdinalityParams) error
	// Bulk upsert distributions with database-side calculations
	BulkUpsertDistributions(ctx context.Context, arg BulkUpsertDistributionsParams) (int64, error)
	BulkUpsertEvents(ctx context.Context, arg BulkUpsertEventsParams) ([]BulkUpsertEventsRow, error)
	BulkUpsertLeagues(ctx context.Context, arg BulkUpsertLeaguesParams) (int64, error)
	BulkUpsertMarketTypes(ctx context.Context, arg BulkUpsertMarketTypesParams) error
	BulkUpsertSports(ctx context.Context, arg BulkUpsertSportsParams) (int64, error)
	BulkUpsertTeams(ctx context.Context, arg BulkUpsertTeamsParams) ([]BulkUpsertTeamsRow, error)
	CountEventsFiltered(ctx context.Context, arg CountEventsFilteredParams) (int32, error)
	CreateConfig(ctx context.Context, arg CreateConfigParams) (AppConfig, error)
	CreateDistributionHistory(ctx context.Context, arg CreateDistributionHistoryParams) (OutcomeDistributionHistory, error)
	CreateEnhancedLeagueMapping(ctx context.Context, arg CreateEnhancedLeagueMappingParams) (LeagueMapping, error)
	CreateEnhancedTeamMapping(ctx context.Context, arg CreateEnhancedTeamMappingParams) (TeamMapping, error)
	CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error)
	CreateLeagueMapping(ctx context.Context, arg CreateLeagueMappingParams) (LeagueMapping, error)
	CreateMatchEvent(ctx context.Context, arg CreateMatchEventParams) (MatchEvent, error)
	CreateMovementAlert(ctx context.Context, arg CreateMovementAlertParams) (MovementAlert, error)
	CreateOddsHistory(ctx context.Context, arg CreateOddsHistoryParams) (OddsHistory, error)
	CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error)
	CreateTeamMapping(ctx context.Context, arg CreateTeamMappingParams) (TeamMapping, error)
	CreateVolumeHistory(ctx context.Context, arg CreateVolumeHistoryParams) (BettingVolumeHistory, error)
	DeactivateExpiredAlerts(ctx context.Context) error
	DeleteLeague(ctx context.Context, id int32) error
	EnrichLeagueWithAPIFootball(ctx context.Context, arg EnrichLeagueWithAPIFootballParams) (League, error)
	EnrichTeamWithAPIFootball(ctx context.Context, arg EnrichTeamWithAPIFootballParams) (Team, error)
	GetActiveAlerts(ctx context.Context, arg GetActiveAlertsParams) ([]GetActiveAlertsRow, error)
	GetActiveEventsForDetailedSync(ctx context.Context, limitCount int32) ([]Event, error)
	GetAllActiveEventsForDetailedSync(ctx context.Context) ([]Event, error)
	// Bulk fetch all distributions for multiple events
	GetAllDistributionsForEvents(ctx context.Context, externalIds []string) ([]GetAllDistributionsForEventsRow, error)
	GetBigMovers(ctx context.Context, arg GetBigMoversParams) ([]GetBigMoversRow, error)
	GetCurrentOdds(ctx context.Context, eventID int32) ([]GetCurrentOddsRow, error)
	GetCurrentOddsByMarket(ctx context.Context, arg GetCurrentOddsByMarketParams) ([]GetCurrentOddsByMarketRow, error)
	GetCurrentOddsByOutcome(ctx context.Context, arg GetCurrentOddsByOutcomeParams) (GetCurrentOddsByOutcomeRow, error)
	// Bulk fetch current odds for implied probability calculation
	GetCurrentOddsForEvents(ctx context.Context, externalIds []string) ([]GetCurrentOddsForEventsRow, error)
	GetCurrentOddsForOutcome(ctx context.Context, arg GetCurrentOddsForOutcomeParams) ([]CurrentOdd, error)
	GetEvent(ctx context.Context, id int32) (GetEventRow, error)
	GetEventByExternalID(ctx context.Context, externalID string) (GetEventByExternalIDRow, error)
	GetEventByExternalIDSimple(ctx context.Context, externalID string) (Event, error)
	GetEventByID(ctx context.Context, id int32) (Event, error)
	// Map external IDs to internal IDs
	GetEventIDsByExternalIDs(ctx context.Context, externalIds []string) ([]GetEventIDsByExternalIDsRow, error)
	GetEventStatisticsSummary(ctx context.Context, eventID int32) (GetEventStatisticsSummaryRow, error)
	// Bulk fetch events by external IDs
	GetEventsByExternalIDs(ctx context.Context, externalIds []string) ([]GetEventsByExternalIDsRow, error)
	GetEventsByTeam(ctx context.Context, arg GetEventsByTeamParams) ([]GetEventsByTeamRow, error)
	// Find low-volume events with big movements (potential sharp money)
	GetHiddenGems(ctx context.Context, arg GetHiddenGemsParams) ([]GetHiddenGemsRow, error)
	// Find events with high betting volume AND significant odds movement
	GetHotMovers(ctx context.Context, arg GetHotMoversParams) ([]GetHotMoversRow, error)
	GetLatestConfig(ctx context.Context, platform string) (AppConfig, error)
	GetLatestOutcomeDistribution(ctx context.Context, arg GetLatestOutcomeDistributionParams) (OutcomeDistribution, error)
	GetLeague(ctx context.Context, id int32) (League, error)
	GetLeagueByExternalID(ctx context.Context, externalID string) (League, error)
	GetLeagueMapping(ctx context.Context, internalLeagueID int32) (LeagueMapping, error)
	GetLeaguesByAPIFootballID(ctx context.Context, apiFootballID *int32) ([]League, error)
	GetLiveEvents(ctx context.Context) ([]GetLiveEventsRow, error)
	GetMarketType(ctx context.Context, code string) (MarketType, error)
	GetMarketTypeByID(ctx context.Context, id int32) (MarketType, error)
	GetMatchEvents(ctx context.Context, eventID *int32) ([]MatchEvent, error)
	GetMatchStatistics(ctx context.Context, eventID *int32) ([]MatchStatistic, error)
	GetNationalTeams(ctx context.Context) ([]Team, error)
	// Get odds changes for a specific market
	GetOddsChangesByMarket(ctx context.Context, arg GetOddsChangesByMarketParams) ([]GetOddsChangesByMarketRow, error)
	// Get full odds history for a specific event
	GetOddsHistory(ctx context.Context, eventID *int32) ([]GetOddsHistoryRow, error)
	GetOddsHistoryByID(ctx context.Context, id int64) (OddsHistory, error)
	GetOddsMovements(ctx context.Context, arg GetOddsMovementsParams) ([]GetOddsMovementsRow, error)
	GetOutcomeDistribution(ctx context.Context, arg GetOutcomeDistributionParams) (OutcomeDistribution, error)
	// Smart Money Tracker queries
	GetRecentBigMovers(ctx context.Context, arg GetRecentBigMoversParams) ([]GetRecentBigMoversRow, error)
	// Get recent significant odds movements across all events
	GetRecentMovements(ctx context.Context, arg GetRecentMovementsParams) ([]GetRecentMovementsRow, error)
	GetRecentOddsHistory(ctx context.Context, arg GetRecentOddsHistoryParams) ([]GetRecentOddsHistoryRow, error)
	// Detect TRUE reverse line movements where odds move against public betting percentages
	GetReverseLineMovements(ctx context.Context, arg GetReverseLineMovementsParams) ([]GetReverseLineMovementsRow, error)
	// Comprehensive sharp money detection combining multiple factors
	GetSharpMoneyIndicators(ctx context.Context, arg GetSharpMoneyIndicatorsParams) ([]GetSharpMoneyIndicatorsRow, error)
	GetSport(ctx context.Context, id int32) (Sport, error)
	// Detect rapid odds movements across multiple bookmakers (steam moves)
	GetSteamMoves(ctx context.Context, arg GetSteamMovesParams) ([]GetSteamMovesRow, error)
	// Get potentially suspicious odds movements (sharp money indicators)
	GetSuspiciousMovements(ctx context.Context, arg GetSuspiciousMovementsParams) ([]GetSuspiciousMovementsRow, error)
	GetTeam(ctx context.Context, id int32) (Team, error)
	GetTeamByExternalID(ctx context.Context, externalID string) (Team, error)
	GetTeamMapping(ctx context.Context, internalTeamID int32) (TeamMapping, error)
	GetTeamsByAPIFootballID(ctx context.Context, apiFootballID *int32) (Team, error)
	GetTeamsByFoundedRange(ctx context.Context, arg GetTeamsByFoundedRangeParams) ([]Team, error)
	GetTeamsByVenueCapacity(ctx context.Context, arg GetTeamsByVenueCapacityParams) ([]Team, error)
	GetTeamsNeedingEnrichment(ctx context.Context, limitCount int64) ([]Team, error)
	// Get current top events by betting volume
	GetTopVolumeEvents(ctx context.Context) ([]GetTopVolumeEventsRow, error)
	GetValueSpots(ctx context.Context, arg GetValueSpotsParams) ([]GetValueSpotsRow, error)
	// Get volume history for a specific event
	GetVolumeHistory(ctx context.Context, eventID *int32) ([]GetVolumeHistoryRow, error)
	ListEventsByDate(ctx context.Context, eventDate pgtype.Timestamp) ([]ListEventsByDateRow, error)
	ListEventsFiltered(ctx context.Context, arg ListEventsFilteredParams) ([]ListEventsFilteredRow, error)
	ListLeagueMappings(ctx context.Context) ([]LeagueMapping, error)
	ListLeagues(ctx context.Context) ([]League, error)
	ListLeaguesForAPIEnrichment(ctx context.Context, limitCount int64) ([]League, error)
	ListMarketTypes(ctx context.Context) ([]MarketType, error)
	ListSports(ctx context.Context) ([]Sport, error)
	ListTeamMappings(ctx context.Context) ([]TeamMapping, error)
	ListTeamsByLeague(ctx context.Context, leagueID *int32) ([]Team, error)
	ListTeamsByLeagueID(ctx context.Context, leagueID *int32) ([]Team, error)
	ListUnmappedFootballLeagues(ctx context.Context) ([]League, error)
	ListUnmappedLeagues(ctx context.Context) ([]League, error)
	ListUnmappedTeams(ctx context.Context) ([]Team, error)
	MarkAlertClicked(ctx context.Context, alertID int32) error
	// COMMENTED OUT: Requires smart_money_preferences table
	// -- name: GetAlertsByUser :many
	// SELECT
	//     ma.*,
	//     oh.event_id,
	//     oh.outcome,
	//     e.external_id as event_external_id,
	//     e.event_date,
	//     ht.name as home_team_name,
	//     at.name as away_team_name,
	//     mt.name as market_name
	// FROM movement_alerts ma
	// JOIN odds_history oh ON ma.odds_history_id = oh.id
	// JOIN events e ON oh.event_id = e.id
	// LEFT JOIN teams ht ON e.home_team_id = ht.id
	// LEFT JOIN teams at ON e.away_team_id = at.id
	// JOIN market_types mt ON oh.market_type_id = mt.id
	// JOIN smart_money_preferences smp ON smp.user_id = sqlc.arg(user_id)
	// WHERE
	//     ma.is_active = true
	//     AND ma.expires_at > NOW()
	//     AND ma.change_percentage >= smp.min_change_percentage
	//     AND ma.multiplier >= smp.min_multiplier
	//     AND ma.confidence_score >= smp.min_confidence_score
	//     AND (
	//         (ma.alert_type = 'big_mover' AND smp.big_mover_alerts = true) OR
	//         (ma.alert_type = 'reverse_line' AND smp.reverse_line_alerts = true) OR
	//         (ma.alert_type = 'sharp_money' AND smp.sharp_money_alerts = true) OR
	//         (ma.alert_type = 'value_spot' AND smp.value_spot_alerts = true)
	//     )
	//     -- Filter by preferred sports/leagues if specified
	//     AND (
	//         smp.preferred_sports = '[]'::jsonb OR
	//         e.sport_id::text = ANY(SELECT jsonb_array_elements_text(smp.preferred_sports))
	//     )
	// ORDER BY ma.created_at DESC
	// LIMIT sqlc.arg(limit_count);
	MarkAlertViewed(ctx context.Context, alertID int32) error
	RefreshBigMovers(ctx context.Context) error
	RefreshContrarianBets(ctx context.Context) error
	RefreshHighVolumeEvents(ctx context.Context) error
	RefreshLiveOpportunities(ctx context.Context) error
	RefreshSharpMoneyMoves(ctx context.Context) error
	RefreshValueSpots(ctx context.Context) error
	SearchTeams(ctx context.Context, arg SearchTeamsParams) ([]Team, error)
	SearchTeamsByCode(ctx context.Context, arg SearchTeamsByCodeParams) ([]Team, error)
	UpdateEventLiveData(ctx context.Context, arg UpdateEventLiveDataParams) (Event, error)
	UpdateEventStatus(ctx context.Context, arg UpdateEventStatusParams) (Event, error)
	UpdateEventVolume(ctx context.Context, arg UpdateEventVolumeParams) (Event, error)
	UpdateLeague(ctx context.Context, arg UpdateLeagueParams) (League, error)
	UpdateLeagueApiFootballID(ctx context.Context, arg UpdateLeagueApiFootballIDParams) error
	UpdateSport(ctx context.Context, arg UpdateSportParams) (Sport, error)
	UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error)
	UpdateTeamApiFootballID(ctx context.Context, arg UpdateTeamApiFootballIDParams) error
	UpsertConfig(ctx context.Context, arg UpsertConfigParams) (AppConfig, error)
	UpsertCurrentOdds(ctx context.Context, arg UpsertCurrentOddsParams) (CurrentOdd, error)
	UpsertEvent(ctx context.Context, arg UpsertEventParams) (Event, error)
	UpsertLeague(ctx context.Context, arg UpsertLeagueParams) (League, error)
	UpsertLeagueMapping(ctx context.Context, arg UpsertLeagueMappingParams) (LeagueMapping, error)
	UpsertMarketType(ctx context.Context, arg UpsertMarketTypeParams) (MarketType, error)
	UpsertMarketTypeByExternalID(ctx context.Context, arg UpsertMarketTypeByExternalIDParams) (MarketType, error)
	UpsertMatchStatistics(ctx context.Context, arg UpsertMatchStatisticsParams) (MatchStatistic, error)
	UpsertOutcomeDistribution(ctx context.Context, arg UpsertOutcomeDistributionParams) (OutcomeDistribution, error)
	UpsertSport(ctx context.Context, arg UpsertSportParams) (Sport, error)
	UpsertTeam(ctx context.Context, arg UpsertTeamParams) (Team, error)
	UpsertTeamMapping(ctx context.Context, arg UpsertTeamMappingParams) (TeamMapping, error)
}

var _ Querier = (*Queries)(nil)
