// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (external_id, name, short_name, country, logo_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, external_id, name, slug, short_name, country, logo_url, created_at, updated_at
`

type CreateTeamParams struct {
	ExternalID string      `db:"external_id" json:"external_id"`
	Name       string      `db:"name" json:"name"`
	ShortName  pgtype.Text `db:"short_name" json:"short_name"`
	Country    pgtype.Text `db:"country" json:"country"`
	LogoUrl    pgtype.Text `db:"logo_url" json:"logo_url"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam,
		arg.ExternalID,
		arg.Name,
		arg.ShortName,
		arg.Country,
		arg.LogoUrl,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Slug,
		&i.ShortName,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeam = `-- name: GetTeam :one
SELECT id, external_id, name, slug, short_name, country, logo_url, created_at, updated_at FROM teams WHERE id = $1
`

func (q *Queries) GetTeam(ctx context.Context, id int32) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Slug,
		&i.ShortName,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByExternalID = `-- name: GetTeamByExternalID :one
SELECT id, external_id, name, slug, short_name, country, logo_url, created_at, updated_at FROM teams WHERE external_id = $1
`

func (q *Queries) GetTeamByExternalID(ctx context.Context, externalID string) (Team, error) {
	row := q.db.QueryRow(ctx, getTeamByExternalID, externalID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Slug,
		&i.ShortName,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchTeams = `-- name: SearchTeams :many
SELECT id, external_id, name, slug, short_name, country, logo_url, created_at, updated_at FROM teams 
WHERE name ILIKE '%' || $1 || '%' 
OR short_name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2
`

type SearchTeamsParams struct {
	SearchTerm pgtype.Text `db:"search_term" json:"search_term"`
	LimitCount int32       `db:"limit_count" json:"limit_count"`
}

func (q *Queries) SearchTeams(ctx context.Context, arg SearchTeamsParams) ([]Team, error) {
	rows, err := q.db.Query(ctx, searchTeams, arg.SearchTerm, arg.LimitCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.Name,
			&i.Slug,
			&i.ShortName,
			&i.Country,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams 
SET name = $1, short_name = $2, country = $3, logo_url = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $5
RETURNING id, external_id, name, slug, short_name, country, logo_url, created_at, updated_at
`

type UpdateTeamParams struct {
	Name      string      `db:"name" json:"name"`
	ShortName pgtype.Text `db:"short_name" json:"short_name"`
	Country   pgtype.Text `db:"country" json:"country"`
	LogoUrl   pgtype.Text `db:"logo_url" json:"logo_url"`
	ID        int32       `db:"id" json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, updateTeam,
		arg.Name,
		arg.ShortName,
		arg.Country,
		arg.LogoUrl,
		arg.ID,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Slug,
		&i.ShortName,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertTeam = `-- name: UpsertTeam :one
INSERT INTO teams (external_id, name, short_name, country, logo_url)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (external_id) DO UPDATE SET
    name = EXCLUDED.name,
    short_name = EXCLUDED.short_name,
    country = EXCLUDED.country,
    logo_url = EXCLUDED.logo_url,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, external_id, name, slug, short_name, country, logo_url, created_at, updated_at
`

type UpsertTeamParams struct {
	ExternalID string      `db:"external_id" json:"external_id"`
	Name       string      `db:"name" json:"name"`
	ShortName  pgtype.Text `db:"short_name" json:"short_name"`
	Country    pgtype.Text `db:"country" json:"country"`
	LogoUrl    pgtype.Text `db:"logo_url" json:"logo_url"`
}

func (q *Queries) UpsertTeam(ctx context.Context, arg UpsertTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, upsertTeam,
		arg.ExternalID,
		arg.Name,
		arg.ShortName,
		arg.Country,
		arg.LogoUrl,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Slug,
		&i.ShortName,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
